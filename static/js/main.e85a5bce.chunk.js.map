{"version":3,"sources":["assets/wave.svg","utils/newId.js","actions/quiz.js","components/QuizTable/index.js","components/CreateSection/index.js","components/Button/index.js","containers/QuizList/index.js","containers/NewQuiz/index.js","containers/NewQuestions/Answer/index.js","containers/NewQuestions/Question/index.js","containers/NewQuestions/index.js","utils/changeAnswerValue.js","utils/changeCorrectAnswer.js","utils/addNewAnswer.js","utils/verifyBlankOptions.js","containers/AnswerQuestions/Answer/index.js","containers/AnswerQuestions/Question/index.js","containers/AnswerQuestions/index.js","routes.js","App.js","reducers/quizReducer.js","reducers/appReducer.js","reducers/index.js","store/index.js","index.js"],"names":["module","exports","lastId","localStorage","getItem","setItem","parseInt","createQuiz","title","description","id","currentId","newId","type","payload","createQuestions","questions","onDeleteQuiz","indexQuizes","QuizStyled","styled","div","connect","state","quiz","app","dispatch","ownProps","a","props","data","map","history","useHistory","theme","createMuiTheme","overrides","MuiTableRow","root","backgroundColor","cursor","ThemeProvider","columns","options","filterType","download","print","onRowClick","row","push","onRowsDelete","rowsDeleted","idsDeleted","index","CreateSectionStyled","Paper","primarycolor","primaryColor","className","children","current","total","variant","color","onClick","onClickButton","bg","blue","buttonText","goBack","backTitle","ButtonStyled","MuiButton","Button","QuizListStyled","section","component","quizId","useState","setTitle","setDescription","canCreate","error","handleCreateQuiz","TextField","label","helperText","required","value","onChange","e","target","GreenCheckbox","withStyles","green","checked","Checkbox","AnswerStyled","Grid","Answer","answerId","answer","questionId","onChangeAnswerValue","onChangeCorrectAnswer","onDeleteAnswer","item","IconButton","aria-label","FormControlLabel","control","answers","correct","QuestionStyled","Question","onChangeQuestionTitle","question","onAddNewAnswer","onDeleteQuestion","elevation","container","spacing","direction","key","style","width","NewQuestionStyled","CreateSection","defaultAnswer","defaultQuestion","setQuestions","handleChangeQuestion","questionIndex","handleAnswerValue","answerIndex","changeAnswerValue","handleChangeCorrectAnswer","changeCorrectAnswer","handleAddAnswer","addNewAnswer","handleDeleteQuestion","length","alert","filter","handleDeleteAnswer","handleDoneCreateQuestions","hasUnfilledCorrectAnswer","hasCorrectAnswer","recurrences","trim","verifyBlankOptions","newQuestions","useEffect","location","pathname","split","find","setTimeout","correctanswer","red","answerResult","setAnswerResult","onChooseAnswer","correctAnswer","answered","undefined","element","setAnswered","handleChooseAnswer","justify","alignItems","path","Routes","exact","QuizList","NewQuiz","NewQuestions","AnswerQuestions","AppStyled","main","waveSvg","App","initialState","rootReducer","combineReducers","deletedQuizIndex","persistConfig","storage","persistedReducer","persistReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","persistor","persistStore","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.e85a5bce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/wave.92235ad1.svg\";","// function to generate unique IDs to the quizes\nlet lastId = localStorage.getItem(\"lastId\") !== null ? localStorage.getItem(\"lastId\") : 1;\nlocalStorage.setItem(\"lastId\", parseInt(lastId)+1);\n\nexport default function() {\n    let currentId = lastId;\n    lastId++;\n    return `${currentId}`;\n}","import newId from '../utils/newId';\n\nexport const CREATE_QUIZ = \"CREATE_QUIZ\";\n\nexport function createQuiz(title, description) {\n    const id = newId();\n    localStorage.setItem(\"quizId\", id);\n    return {\n        type: CREATE_QUIZ,\n        payload: {\n            title,\n            description,\n            id: parseInt(id)\n        }\n    }\n};\n\nexport const CREATE_QUESTIONS = \"CREATE_QUESTIONS\";\n\nexport function createQuestions( questions ) {\n    let id = localStorage.getItem(\"quizId\");\n    return {\n        type: CREATE_QUESTIONS,\n        payload: {\n            id: parseInt(id),\n            questions\n        }\n    }\n};\n\nexport const DELETE_QUIZ = \"DELETE_QUIZ\";\n\nexport function onDeleteQuiz( indexQuizes ) {\n    return {\n        type: DELETE_QUIZ,\n        payload: {\n            indexQuizes\n        }\n    }\n};","import React from 'react';\nimport MUIDataTable from \"mui-datatables\";\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { onDeleteQuiz } from '../../actions';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nconst QuizStyled = styled.div`\n    width: 90%;\n    margin: 0 auto;\n`\n\nfunction QuizTable (props) {\n    const data = props.quiz.map(quiz => {\n        return [ quiz.id, quiz.title, quiz.description]\n    })\n    const columns = [\"ID\", \"Quiz Title\", \"Quiz Description\"];\n    const history = useHistory();\n\n    // use createMuiTheme to override the material-ui styles properly\n    const theme = createMuiTheme({\n        overrides: {\n            MuiTableRow: {\n                root: {\n                    \"&$selected&$hover\": { backgroundColor: \"rgba(123, 0, 130, .3)\" },\n                    cursor: \"pointer\",\n                }\n            }\n        }\n    });\n\n    const options = (history) => ({\n        filterType: 'checkbox',\n        download: false,\n        print: false,\n        onRowClick: row => {\n            history.push(`/Quiz-Creator/quiz/${row[0]}`);\n        },\n        onRowsDelete: rowsDeleted => {\n            const idsDeleted = rowsDeleted.data.map(row => row.index)\n            props.onDeleteQuiz(idsDeleted)\n        }\n    });\n    return (\n        <QuizStyled>\n            <ThemeProvider theme={theme}>\n                <MUIDataTable\n                    title={\"List of all quizes\"}\n                    data={data}\n                    columns={columns}\n                    options={options(history)}\n                />\n            </ThemeProvider>\n        </QuizStyled>\n    )\n};\n\nconst mapStateToProps = state => ({\n    quiz: state.quiz,\n    app: state.app\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        onDeleteQuiz: async ( indexQuizes ) => {\n            await dispatch(onDeleteQuiz(indexQuizes));\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuizTable)","import React from 'react';\nimport { \n    Paper\n} from '@material-ui/core';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { Button } from '../';\nimport { Button as MuiButton } from '@material-ui/core'\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { useHistory } from 'react-router-dom';\n\nconst CreateSectionStyled = styled(Paper)`\n    width: 90%;\n    margin: 50px auto 0 auto;\n    padding: 40px;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    h1 {\n        color: ${props => props.primarycolor};\n        margin-bottom: 20px;\n    };\n    .input {\n        margin: 10px 0;\n    }\n    .backButton {\n        align-items: center;\n        display: flex;\n        position: absolute;\n        top: 10px;\n        left: 10px;\n        &:hover {\n            background-color: transparent;\n            text-decoration: underline;\n        }\n        span, svg {\n            color: ${props => props.primarycolor};\n            text-transform: none;\n            font-size: 14px;\n        }\n    }\n    .page {\n        position: absolute;\n        bottom: 10px;\n        left: 40px;\n        color: #757575;\n    }\n    button {\n        margin: 0 auto;\n    }\n    .nextButton {\n        background-color: ${props => props.primarycolor};\n        transition: opacity .2;\n        &:hover {\n            background-color: ${props => props.primarycolor};\n            opacity: .8\n        }\n    }\n    \n`\n\nfunction CreateSection(props) {\n    const history = useHistory();\n\n    function goBack(history) {\n        history.goBack();\n    }\n    return (\n        <CreateSectionStyled primarycolor={props.app.primaryColor} className={props.className}>\n            <h1> {props.title} </h1>\n            {props.children}\n            {/* validate if has current and total, if it does, show the page counter */}\n            {props.current && props.total && \n                <div className=\"page\">\n                    {props.current} of {props.total}\n                </div>\n            }\n            <Button \n                variant=\"contained\" \n                color=\"primary\" \n                className=\"button nextButton\"\n                onClick={props.onClickButton}\n                bg={props.app.blue}\n            >\n                { props.buttonText }\n            </Button>\n            <MuiButton onClick={() => goBack(history)} className=\"backButton\">\n                <ArrowBackIcon /> <span> {props.backTitle} </span>\n            </MuiButton>\n        </CreateSectionStyled>\n    )\n}\n\nconst mapStateToProps = state => ({\n    app: state.app\n});\n\nexport default connect(mapStateToProps, null)(CreateSection);","import React from 'react';\nimport styled from 'styled-components';\nimport { Button as MuiButton } from '@material-ui/core';\n\nconst ButtonStyled = styled(MuiButton)`\n    width: 15vw;\n    max-width: 170px;\n    background-color: ${props => props.bg} !important;\n    transition: opacity .2s;\n    margin: 40px auto 0 auto;\n    text-transform: none !important;\n    &:hover {\n        background-color: ${props => props.bg};\n        opacity: .8\n    }\n`\n\nexport default function Button(props) {\n    return (\n        <ButtonStyled {...props} />\n    )\n}","import React from 'react';\nimport { QuizTable } from '../../components';\nimport styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst QuizListStyled = styled.section`\n    h1 {\n        text-align: center;\n        font-size: 40px;\n        background-color: ${props => props.primarycolor};\n        color: white;\n        padding: 20px 0;\n        margin: 30px 0 100px 0;\n    };\n    .createButtonContainer {\n        width: 90%;\n        display: flex;\n        margin: 0 auto;\n        justify-content: flex-end;\n        margin-bottom: 10px;\n        > span {\n            background-color: ${props => props.primarycolor};\n            color: white;\n            font-weight: bold;\n            padding: 6px 20px;\n        }\n    }\n`;\n\nfunction QuizList(props) {\n    const history = useHistory();\n    return (\n        <QuizListStyled primarycolor={props.app.primaryColor}>\n            <h1> Quiz Creator </h1>\n            <div className=\"createButtonContainer\">\n                <Button variant=\"contained\" color=\"primary\" component=\"span\" onClick={() => history.push(\"/Quiz-Creator/quiz/new\")}>\n                    Create new Quiz\n                </Button>\n            </div>\n            <QuizTable />\n        </QuizListStyled>\n    )\n};\n\nconst mapStateToProps = state => ({\n    app: state.app\n});\n\nexport default connect(mapStateToProps, null)(QuizList);","import React, { useState } from 'react';\nimport { \n    TextField,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { useHistory } from \"react-router-dom\";\nimport { CreateSection } from '../../components';\nimport styled from 'styled-components';\nimport {\n    createQuiz\n} from '../../actions'\n\nfunction NewQuiz(props) {\n    const [title, setTitle] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const history = useHistory();\n\n    function handleCreateQuiz(title,description, history) {\n        const {\n            createQuiz\n        } = props;\n        let canCreate = true;\n        if(title === \"\"){\n            setTitle({ error: \"not filled\" });\n            canCreate =  false;\n        }\n        if(description === \"\") {\n            setDescription({ error: \"not filled\" });\n            canCreate =  false;\n        }\n        if(canCreate){\n            createQuiz(title,description, history);\n        }\n    }\n    return(\n        <CreateSection \n            title=\"Create a new quiz\"\n            current=\"1\"\n            total=\"2\"\n            buttonText=\"Next\"\n            backTitle=\"Back to List\"\n            onClickButton={() => handleCreateQuiz(title, description, history)}\n        >\n            <TextField \n                label={title.error ? \"You must fill this Input\" : \"Title\" }\n                variant=\"outlined\" \n                id=\"title\" \n                helperText=\"Title of your quiz\"\n                required\n                error={title.error ? true : false}\n                className=\"input\"\n                value={title.error ? \"\" : title}\n                onChange={(e) => setTitle(e.target.value)}\n            />\n        \n            <TextField \n                label={description.error ? \"You must fill this Input\" : \"Description\"} \n                variant=\"outlined\" \n                id=\"description\"\n                error={description.error ? true : false}\n                required\n                helperText=\"Description of your quiz\"\n                className=\"input\"\n                value={description.error ? \"\" : description}\n                onChange={(e) => setDescription(e.target.value)}\n            />\n        </CreateSection>\n    )\n}\n\nconst mapStateToProps = state => ({\n    app: state.app\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        createQuiz: async ( title, description, history ) => {\n            await dispatch(createQuiz(title,description));\n            const quizId = localStorage.getItem('quizId');\n            history.push(`/Quiz-Creator/quiz/${quizId}/questions/new`);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuiz);","import React from 'react';\nimport { \n    TextField,\n    Grid,\n    FormControlLabel,\n    IconButton\n} from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport styled from 'styled-components';\n\n// use WithStyles from material-ui to change the checkebox properly\nconst GreenCheckbox = withStyles({\n    root: {\n      '&$checked': {\n        color: green[600],\n      },\n    },\n    checked: {},\n})(props => <Checkbox color=\"default\" {...props} />);\n\nconst AnswerStyled = styled(Grid)`\n    display: flex;\n    .answer {\n        position: relative;\n        width: 80%;\n        .deleteAnswer {\n            position: absolute;\n            right: 0;\n            top: 10px;\n            span {\n                opacity: .5\n            }\n        }\n    }\n\n`\n\nexport default function Answer(props) {\n    const {\n        answerId,\n        answer,\n        questionId,\n        questions,\n        onChangeAnswerValue,\n        onChangeCorrectAnswer,\n        onDeleteAnswer,\n    } = props;\n    return(\n        <AnswerStyled item>\n            <Grid item className=\"answer\">\n                {/* verifyBlankOption returns { error: \"\" } instead of the value in inputs that's not filled */}\n                <TextField \n                    label={answer.value.error ? \"You must fill this Input\" :`Answer ${answerId + 1}`}\n                    required\n                    error={answer.value.error ? true : false}\n                    className=\"input\"\n                    value={answer.value.error ? \"\" : answer.value}\n                    onChange={(e) => onChangeAnswerValue(questionId, answerId, e.target.value)}\n                />\n                <IconButton aria-label=\"delete\" className=\"deleteAnswer\" onClick={() => onDeleteAnswer(questionId, answerId)}>\n                    <DeleteIcon />\n                </IconButton>\n            </Grid>\n            <FormControlLabel\n                control={<GreenCheckbox checked={questions[questionId].answers[answerId].correct} onChange={(e) => onChangeCorrectAnswer(questionId, answerId, e.target.checked)} />}\n                label=\"Right Answer\"\n                className=\"answerCheckbox\"\n            />\n        </AnswerStyled>\n    )\n}","import React from 'react';\nimport { \n    TextField,\n    Paper,\n    Grid,\n    IconButton\n} from '@material-ui/core';\nimport Answer from '../Answer';\nimport { Button } from '../../../components';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport styled from 'styled-components';\n\nconst QuestionStyled = styled(Paper)`\n    position: relative;\n    .deleteQuestion {\n        position: absolute;\n        right: 10px;\n        top: 10px;\n        svg {\n            color: #757575;\n            opacity: .5\n        }\n    }\n`\nexport default function Question(props){\n    const {\n        questions,\n        questionId,\n        onChangeQuestionTitle,\n        question,\n        onChangeAnswerValue,\n        onChangeCorrectAnswer,\n        onAddNewAnswer,\n        onDeleteQuestion,\n        onDeleteAnswer\n    } = props;\n    return (\n        <QuestionStyled\n            elevation={3} \n            className=\"content\"\n        >\n            <IconButton aria-label=\"delete\" className=\"deleteQuestion\" onClick={() => onDeleteQuestion(questionId)}>\n                <DeleteIcon />\n            </IconButton>\n            <Grid \n                container \n                className=\"questionContainer\" \n                spacing={3}\n                direction=\"column\"\n            >\n                <h2> Question { questionId + 1 } </h2>\n                <Grid item className=\"question\">\n                    {/* verifyBlankOption returns { error: \"\" } instead of the value in inputs that's not filled */}\n                    <TextField \n                        label={question.title.error ? \"You must fill this Input\" : \"Question\"} \n                        variant=\"outlined\" \n                        helperText=\"Your Question\"\n                        required\n                        error={question.title.error ? true : false}\n                        className=\"input\"\n                        value={question.title.error ? \"\" : question.title}\n                        onChange={(e) => onChangeQuestionTitle(questionId, e.target.value)}\n                    />\n                </Grid>\n                <h2> Answers </h2> \n                {question.answers.map((answer,answerId) => {\n                    return (\n                        <Answer\n                            key={answerId}\n                            answerId={answerId}\n                            answer={answer}\n                            questionId={questionId}\n                            questions={questions}\n                            onChangeAnswerValue={onChangeAnswerValue}\n                            onChangeCorrectAnswer={onChangeCorrectAnswer}\n                            onDeleteAnswer={onDeleteAnswer}\n                        />\n                    )\n                })}\n                <Button \n                    bg=\"#51A041\"\n                    variant=\"contained\" \n                    color=\"primary\"\n                    onClick={() => onAddNewAnswer(questionId)}\n                    style={{ width: 120 }}\n                > \n                    New Answer\n                </Button>\n            </Grid>\n        </QuestionStyled>\n    )\n}","import React, { useState, useEffect } from 'react';\nimport { CreateSection } from '../../components';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { Button } from '../../components';\nimport changeAnswerValue from '../../utils/changeAnswerValue';\nimport changeCorrectAnswer from '../../utils/changeCorrectAnswer';\nimport addNewAnswer from '../../utils/addNewAnswer';\nimport verifyBlankOptions from '../../utils/verifyBlankOptions';\nimport { createQuestions } from '../../actions';\nimport { useHistory } from 'react-router-dom';\nimport Question from './Question';\n\nconst NewQuestionStyled = styled(CreateSection)`\n    .content {\n        flex-grow: 1;\n        margin-bottom: 20px;\n        .questionContainer {\n            padding: 30px;\n            .input, .question {\n                width: 100%;\n            };\n            .answers {\n                width: 100%;\n                display: flex;\n                .input {\n                    flex: 8\n                };\n                .answerCheckbox {\n                    flex: 1;\n                }\n            };\n        }\n    }\n    .newQuestionButton {\n        margin: 20px auto;\n    }\n`;\n\nfunction NewQuestions(props) {\n    // state with a default answer, used to send to utils/addNewAnswer.js function\n    const [ defaultAnswer ] = useState({\n        value: \"\",\n        correct: false\n    });\n    // state with a default question, used to send to createQuestions action\n    const [ defaultQuestion ] = useState([{\n        title: \"\",\n        answers: [defaultAnswer, defaultAnswer, defaultAnswer, defaultAnswer]\n    }]);\n    const [questions, setQuestions] = useState(defaultQuestion);\n    const history = useHistory();\n\n    useEffect(() => {\n        // catch the quiz ID from the URI\n        let id = parseInt(props.location.pathname.split(\"/\")[2]);\n        const haveQuiz = props.quiz.find(quiz => quiz.id === id);\n        // check if have the quiz, if it's not, alert the user and redirect to the quiz list\n        if(!haveQuiz) {\n            alert(\"you must have a quiz with this ID\");\n            setTimeout(history.push(\"/Quiz-Creator\"), 2000);\n        }\n    }, [])\n    function handleChangeQuestion(id, value) {\n        setQuestions(questions.map((question, questionIndex) => {\n            if(questionIndex === id) {\n                return {\n                    ...question,\n                    title: value\n                };\n            }\n            return question;\n        }))\n    }\n\n    function handleAnswerValue(questionId, answerId, value) {\n        setQuestions(changeAnswerValue(questions, questionId, answerId, value));\n    }\n\n    function handleChangeCorrectAnswer(questionId, answerId, checked) {\n        setQuestions(changeCorrectAnswer(questions, questionId, answerId, checked));\n    }\n\n    function handleAddAnswer(questionId) {\n        setQuestions(addNewAnswer(questions, questionId, defaultAnswer));\n    }\n\n    function handleAddQuestion() {\n        setQuestions([...questions, ...defaultQuestion])\n    }\n\n    function handleDeleteQuestion(questionId) {\n        if(questions.length === 1) {\n            alert(\"you must have at least 1 question\")\n        } else {\n            setQuestions(questions.filter((question, questionIndex) => questionIndex !== questionId))\n        }\n    }\n    \n    function handleDeleteAnswer(questionId, answerId) {\n        // check if the question have less than 5 answers\n        if(questions[questionId].answers.length <= 4) {\n            alert(\"your question needs at least 4 answers\")\n        } else {\n            // delete the answer\n            setQuestions(questions.map((question, questionIndex) => {\n                if(questionIndex === questionId) {\n                    return {\n                        ...question,\n                        answers: question.answers.filter((answer, answerIndex) => answerIndex !== answerId)\n                    };\n                }\n                return question;\n            }))\n        }\n    }\n\n    function handleDoneCreateQuestions(questions, history) {\n        const {\n            createQuestions\n        } = props;\n        let hasUnfilledCorrectAnswer = questions.map(question => {\n            return question.answers.filter(answer => answer.correct === true).length > 0\n        });\n        // check if has a question without correct answer\n        hasUnfilledCorrectAnswer.map((hasCorrectAnswer, index) => {\n            if(hasCorrectAnswer === false) {\n                return alert(`The question ${index + 1} needs a correct answer`)\n            }\n            return true\n        })\n        // get how many questions have without correct answer\n        hasUnfilledCorrectAnswer = hasUnfilledCorrectAnswer.filter(recurrences => recurrences === false).length;\n        // call verifyBlankOptions to change empty values to an error\n        let { canCreate, questions: newQuestions } = verifyBlankOptions(questions);\n        // veriFyOptions return canCreate, so validate if canCreate (questions and answers not empty) and if has no one unfilled correct answer\n        if(canCreate && hasUnfilledCorrectAnswer === 0){\n            createQuestions(questions, history)\n        } else {\n            setQuestions(newQuestions);\n        }\n    }\n\n    return (\n        <NewQuestionStyled \n            title=\"Create new Questions\"\n            current=\"2\"\n            total=\"2\"\n            buttonText=\"Done\"\n            onClickButton={() => handleDoneCreateQuestions(questions, history)}\n            backTitle=\"Back to Quiz\"\n        >\n            {questions.map((question,questionId) => {\n                return (\n                    <Question \n                        key={questionId}\n                        questionId={questionId}\n                        questions={questions}\n                        question={question}\n\n                        onChangeQuestionTitle={handleChangeQuestion}\n                        onDeleteQuestion={handleDeleteQuestion}\n\n                        onChangeAnswerValue={handleAnswerValue}\n                        onChangeCorrectAnswer={handleChangeCorrectAnswer}\n                        onAddNewAnswer={handleAddAnswer}\n                        onDeleteAnswer={handleDeleteAnswer}\n                    >\n\n                    </Question>\n                )\n            })}\n            <Button \n                bg=\"#51A041\"\n                variant=\"contained\" \n                color=\"primary\" \n                className=\"newQuestionButton\"\n                onClick={handleAddQuestion}\n            >\n                New Question\n            </Button>\n        </NewQuestionStyled>\n    )\n}\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    quiz: state.quiz\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        createQuestions: async ( questions, history ) => {\n            await dispatch(createQuestions(questions));\n            history.push(`/Quiz-Creator`);\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewQuestions);","// used to change the value of an answer, need: \n// questions: the currrent state of the questions;\n// questionId: the id of the question that I need to change the answer value;\n// answerId: the id of the answer that I need to change the value\n// value: the value of the answer\nexport default function changeAnswerValue(questions, questionId, answerId, value) {\n    return questions.map((question, questionIndex) => {\n        if(questionIndex === questionId) {\n            return {\n                ...question,\n                answers: question.answers.map((answer, answerIndex) => {\n                    if(answerIndex === answerId) {\n                        return {\n                            ...answer,\n                            value\n                        }\n                    }\n                    return answer;\n                })\n            }\n        }\n        return question\n    })\n}","// used to change the correct answer, need: \n// questions: the currrent state of the questions;\n// questionId: the id of the question that I need to change the answer value;\n// answerId: the id of the answer that I need to change the value\n// checked: if it's checked (correct answer) or not\nexport default function changeCorrectAnswer(questions, questionId, answerId, checked) {\n    return questions.map((question, questionIndex) => {\n        if(questionIndex === questionId) {\n            return {\n                ...question,\n                answers: question.answers.map((answer, answerIndex) => {\n                    if(answerIndex === answerId) {\n                        return {\n                            ...answer,\n                            correct: checked\n                        }\n                    } else if(checked === true) {\n                        return {\n                            ...answer,\n                            correct: !checked\n                        }\n                    } else {\n                        return answer\n                    }\n                })\n            }\n        }\n        return question\n    })\n}","// used to add a new answer to an question, need:\n// questions: the currrent state of the questions;\n// questionId: the id of the question that I need a new answer;\n// defaultAnswer: a mock of a answer to add  \nexport default function addNewAnswer(questions, questionId, defaultAnswer) {\n    return questions.map((question, questionIndex) => {\n        if(questionIndex === questionId) {\n            return {\n                ...question,\n                answers: [\n                    ...question.answers,\n                    defaultAnswer\n                ]\n            }\n        }\n        return question\n    })\n}","// used to verify the empty input's and return an error if it's not filled, need:\n// questions: the currrent state of the questions;\nexport default function verifyBlankOptions(questions) {\n    let canCreate = true;\n    questions = questions.map(question => {\n        return {\n            title: (() => {\n                if(!question.title.error && question.title.trim() === \"\") {\n                    canCreate = false;\n                    return { error: \"not filled\" }\n                }\n                return question.title\n            })(),\n            answers: question.answers.map(answer => {\n                return {\n                    ...answer,\n                    value: (() => {\n                        if(!answer.value.error && answer.value.trim() === \"\") {\n                            canCreate = false;\n                            return { error: \"not filled\" }\n                        }\n                        return answer.value \n                    })()\n                }\n            })\n        }\n    })\n    return {\n        canCreate,\n        questions\n    }\n}","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@material-ui/core';\nimport { green } from '@material-ui/core/colors';\nimport red from '@material-ui/core/colors/red';\n\nconst AnswerStyled = styled(Button)`\n    border: 1px solid #ccc !important; \n    margin-bottom: 10px !important;\n    width: 100%;\n    color: ${props => props.correctanswer === \"\" ? \"black\" : \"white\"} !important;\n    background-color: ${props => {\n        if(props.correctanswer === \"rightAnswer\") {\n            return green[600]\n        } else if(props.correctanswer === \"wrongAnswer\") {\n            return red[600]\n        } else {\n            return \"transparent\"\n        }\n    }} !important;\n`\n\nfunction Answer(props) {\n    // variable to store the current state of the answer, if it was clicked or not, if it's the right answer or the wrong answer etc.\n    const [ answerResult, setAnswerResult ] = useState(\"\");\n    const {\n        answer,\n        onChooseAnswer,\n        correctAnswer,\n        answered\n    } = props;\n    // useEffect to check every time that \"answered\" variable was changed, to see if it needs to change the background or not\n    useEffect(() => {\n        if(answered === answer && answered === correctAnswer ){\n            setAnswerResult(\"rightAnswer\");\n        } else if(answered === answer && answered !== correctAnswer) {\n            setAnswerResult(\"wrongAnswer\");\n        } else if(answered.value !== undefined && answered !== correctAnswer && answer === correctAnswer) {\n            setAnswerResult(\"rightAnswer\")\n        } else {\n            setAnswerResult(\"\");\n        }\n    },[answered])\n    return (\n        <AnswerStyled \n            onClick={() => onChooseAnswer(answer)}\n            correctanswer={answerResult}\n        >\n            {answer.value}\n        </AnswerStyled>\n    )\n};\n\nexport default Answer;","import React, { useState } from 'react';\nimport { Paper, Grid } from '@material-ui/core';\nimport styled from 'styled-components';\nimport Answer from '../Answer';\n\nconst QuestionStyled = styled(Paper)`\n    padding: 30px;\n    margin-bottom: 30px;\n`\n\nfunction Question(props) {\n    const {\n        title,\n        answers,\n    } = props;\n    // catch the correct answer\n    const [ correctAnswer ] = useState(answers.find(element => element.correct));\n    // variable to store the chosen answer\n    const [ answered, setAnswered ] = useState({})\n\n    function handleChooseAnswer(answer) {\n        setAnswered(answer);\n    }\n    return (\n        <QuestionStyled>\n            <h1> {title} </h1>\n            <Grid \n                container\n                className=\"answers\"\n                direction=\"column\"\n                justify=\"center\"\n                alignItems=\"center\"\n            >\n                {answers.map((answer,index) => {\n                    return (\n                        <Answer\n                            onChooseAnswer={handleChooseAnswer}\n                            key={index}\n                            answer={answer}\n                            correctAnswer={correctAnswer}\n                            answered={answered}\n                        />\n                    )\n                })}\n            </Grid>\n        </QuestionStyled>\n    )\n}\n\nexport default Question;","import React, { useState, useEffect } from 'react';\nimport { CreateSection } from '../../components';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Question from './Question'\n\nfunction AnswerQuestions(props) {\n    const history = useHistory();\n    // path and quizId catch the quizId from the URI\n    const path = props.location.pathname;\n    const quizId = parseInt(path[path.length - 1]);\n    // catch the questions based on the quizId on the URI\n    let [ data ] = useState(props.quiz.find(element => element.id === quizId));\n    useEffect(() => {\n        const haveQuiz = props.quiz.find(quiz => quiz.id === quizId);\n        // check if have this quiz in the redux, if it's not, alert the user and redirect the page\n        if(!haveQuiz) {\n            alert(\"you must have a quiz with this ID\");\n            setTimeout(history.push(\"/Quiz-Creator\"), 2000);\n        }\n    },[])\n\n    function handleDoneAnswerQuiz() {\n        history.push(\"/Quiz-Creator\");\n    }\n    \n    return (\n        <CreateSection\n            title={data.title}\n            buttonText=\"Finish your Quiz\"\n            onClickButton={() => handleDoneAnswerQuiz()}\n            backTitle=\"Back to List\"\n        >\n            {data.questions.map((question, index) => {\n                return (\n                    <Question\n                        key={index}\n                        title={question.title}\n                        answers={question.answers}\n                    >\n                    </Question>\n                )\n            })}\n        </CreateSection>\n    )\n}\n\nconst mapStateToProps = state => ({\n    app: state.app,\n    quiz: state.quiz\n});\n\nexport default connect(mapStateToProps, null)(AnswerQuestions);","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\nimport { \n    QuizList,\n    NewQuiz,\n    NewQuestions,\n    AnswerQuestions\n} from './containers';\n\n// Component with all the Routes of the Application\nexport default function Routes() {\n    return (\n        <Router>\n            <Switch>\n                {/* assuming that the main route of the Application is the quiz list */}\n                <Route exact path=\"/Quiz-Creator\" component={QuizList} />\n                <Route path=\"/Quiz-Creator/quiz/new\" component={NewQuiz} />\n                <Route path=\"/Quiz-Creator/quiz/:id/questions/new\" component={NewQuestions} />\n                <Route path=\"/Quiz-Creator/quiz/:id\" component={AnswerQuestions} />\n            </Switch>\n        </Router>\n    )\n}","import React from 'react';\nimport Routes from './routes';\nimport styled from 'styled-components';\nimport waveSvg from './assets/wave.svg';\n\n// creating the wave in the background\nconst AppStyled = styled.main`\n  background-image: url(${waveSvg});\n  background-size: contain;\n  background-position: center bottom;\n  background-repeat: no-repeat;\n  background-attachment: fixed;\n  min-height: 100vh;\n`\n\nfunction App() {\n  return (\n    <AppStyled>\n      <Routes />\n    </AppStyled>\n  );\n}\n\nexport default App;\n","import { CREATE_QUIZ, CREATE_QUESTIONS, DELETE_QUIZ} from '../actions'\nconst initialState = [];\n\n// reducer to add all the quiz state\nexport default function quizReducer(state = initialState, { type, payload }) {\n    switch(type) {\n        case CREATE_QUIZ: \n            return [\n                ...state,\n                {\n                    id: payload.id,\n                    title: payload.title,\n                    description: payload.description,\n                }\n            ]\n        case CREATE_QUESTIONS:\n            return state.map(quiz => {\n                if(quiz.id === payload.id){\n                    return {\n                        ...quiz,\n                        questions: payload.questions\n                    }\n                }\n                return quiz;\n            })\n        case DELETE_QUIZ:\n            // filter all the quizes that have the index inside the array of indexQuizes\n            state = state.filter((quiz, index) => {\n                return payload.indexQuizes.find(deletedQuizIndex => index === deletedQuizIndex) === undefined;\n            })\n            return state;\n        default:\n            return state;\n    }\n}","const initialState = {\n    primaryColor: \"purple\"\n};\n\n// reducer to add common props of the application\nexport default function appReducer(state = initialState, action) {\n    return state;\n}","import { combineReducers } from 'redux';\nimport quizReducer from './quizReducer';\nimport appReducer from './appReducer';\n\nexport const rootReducer = combineReducers({\n    quiz: quizReducer,\n    app: appReducer\n})","import { createStore } from 'redux'\nimport { rootReducer } from '../reducers';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\n// persist config of persistStore, which enables me to store my redux even if I reload the page\nconst persistConfig = {\n    key: 'root',\n    storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = createStore(\n    persistedReducer,\n    // extension to be more easy to check redux, to see it install redux devtools in chrome browser\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\nconst persistor = persistStore(store);\nexport { store, persistor };","import { Provider } from \"react-redux\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store, persistor } from './store';\nimport './global.css';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}